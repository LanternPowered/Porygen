plugins {
    id 'net.minecrell.licenser' version '0.4'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
    id 'org.spongepowered.plugin' version '0.8.1'
    id 'org.jetbrains.kotlin.jvm' version '1.3.0'
}

// Basic project information
group = 'org.lanterpowered'
archivesBaseName = 'porygen'
version = '1.0.0-SNAPSHOT'

// Minimum version of Java required
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

defaultTasks 'licenseFormat', 'build'

sponge {
    plugin {
        id = rootProject.archivesBaseName
        meta {
            name = rootProject.name
            version = rootProject.version
            description = "A polygonal world generator. This is the official world generator for Lantern."
            authors = [ "Cybermaxke" ]
        }
    }
}

// Repositories
repositories {
    mavenCentral()
    maven {
        url 'http://repo.spongepowered.org/maven'
    }
    maven {
        url 'https://jitpack.io'
    }
}

// Project dependencies
dependencies {
    // compile 'org.spongepowered:spongeapi:7.1.0-SNAPSHOT'
    compile 'org.spongepowered:noise:2.0.0-SNAPSHOT'
    // Not exposed in the api, but every known impl supports it
    compile 'it.unimi.dsi:fastutil:8.2.2'

    // Kotlin
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compile 'org.jetbrains.kotlin:kotlin-reflect'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile)*.kotlinOptions {
    jvmTarget = '1.8'
    languageVersion = '1.3'
    freeCompilerArgs = [
            '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes',
            '-Xuse-experimental=kotlin.contracts.ExperimentalContracts',
            '-Xjvm-default=enable',
            '-XXLanguage:+InlineClasses'
    ]
}

processResources {
    from 'LICENSE.txt'
}

jar {
    classifier = 'base'
}

shadowJar {
    classifier = ''
    configurations = [project.configurations.shadow]
}
assemble.dependsOn shadowJar

task sourceJar(type: Jar) {
    classifier = 'sources'

    // Include all the source code
    from sourceSets.main.allSource
    from 'LICENSE.txt'
    from 'NOTICE'
}
assemble.dependsOn sourceJar

/////////////////////////////////
/// License Header Generation ///
/////////////////////////////////

license {
    header project.file('HEADER.txt')

    include '**/*.java'
    include '**/*.kt'

    newLine false
    ignoreFailures false

    ext {
        name = project.name
        url = project.url
        organization = project.organization
    }
}

///////////////////////////////////
/// Gradle Wrapper update tasks ///
///////////////////////////////////

// Gradle version used for generating the Gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}

// A custom update wrapper task, using a custom task prevents
// intellij from updating the wrapper constantly through
// the wrapper task
task updateWrapper(dependsOn: wrapper)

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    // Only enable the wrapper task if the updateWrapper task is run
    wrapper.enabled = graph.allTasks.contains(updateWrapper)
}
